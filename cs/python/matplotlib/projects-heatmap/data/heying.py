# -*- coding: utf-8 -*-
"""
Created on Sat Feb  4 21:28:26 2023
@author: shiduyule
"""
#%% 
'''
import matplotlib.pyplot as plt
import numpy as np
def er(data2d,width,height,title):
    #%% 导入模块 import modules
    import matplotlib.pyplot as plt  
    import numpy as np
    from numpy import mean, sqrt, square    
    #data2d = data2d[::-1]
    
    #%% 矩阵转化 利用matlab中 拟合得到的函数
    def function_distance_theta(x):   # x 是形式参数 data2d是实际参数
        y = 81
        theta = np.arctan(x/y)
        degree = np.degrees(theta)  # 弧度制转角度制
        return (degree)
        
    def function_theta_strain(data2d):
        a0 =   7.363e-05 
        a1 =  -8.187e-05 
        b1 =  -2.305e-05 
        a2 =   7.352e-06 
        b2 =   1.373e-05 
        a3 =   9.547e-07 
        b3 =  -1.768e-06 
        w =       1.798  

        for i in range(0,np.shape(data2d)[0]):
            for j in range(0,np.shape(data2d)[1]):
                x = data2d[i,j]
                if x >= 0:
                    fitfunction =  a0 + a1 * np.cos(x*w) + b1 * np.sin(x*w) + a2 * np.cos(2*x*w) + b2 * np.sin(2*x*w) + a3 * np.cos(3*x*w) + b3 * np.sin(3*x*w)
                    data2d[i,j] = fitfunction
                else:
                    x = -1 * x
                    fitfunction =  a0 + a1 * np.cos(x*w) + b1 * np.sin(x*w) + a2 * np.cos(2*x*w) + b2 * np.sin(2*x*w) + a3 * np.cos(3*x*w) + b3 * np.sin(3*x*w)
                    data2d[i,j] = 1 * fitfunction    # 区分左旋 右旋的时候加上负号 算平均值的时候不加负号 同时导致了正负不分中间的零点被忽略
        return (data2d)
    data2d = function_distance_theta(data2d)
    data2d = function_theta_strain(data2d)
    print(title)
    print('rms = %e'%sqrt(mean(square(data2d))))
    print('avg = %e'%mean(data2d))
    
    #%% 矩阵扩充  matrix expand 至少扩充到 100 * 100
    benzhenghangshu = np.shape(data2d)[0]  #行数  
    benzhenglieshu = np.shape(data2d)[1]  #列数
    #=============================================================================
    #%%扩充列数  设置density 即可
    j = 0
    density = 100  # 插入的矩阵行数为data2d的行数  列数为设置的密度值
    while True: 
        insertcolumn = np.empty([np.shape(data2d)[0] ,density], dtype = float)
        i = 0
        while i < np.shape(data2d)[0]:  # 当行数在总行数范围内
            insertcolumn[i,:] = np.linspace(data2d[i,j],data2d[i,j+1],density+1,endpoint = False)[1:density+1] # 以第i行第j列 和第i行第j+1列为起始值   这里是 5行 10列数组   ## 注意数组 索引的左闭右开 
            i = i + 1 
            # print(j,i)
            # print('\n')    
        insertcolumn = insertcolumn.transpose()
        data2d = np.insert(data2d, j+1,insertcolumn, axis=1) # 插入density列
        j = j + 1 + density 
        muqianlieshu = np.shape(data2d)[1]
        if muqianlieshu >= ((benzhenglieshu-1)*density + benzhenglieshu):
            break
    #============================================================================
    #%%扩充行数
    i = 0
    # 插入的矩阵行数为data2d的行数  列数为设置的密度值
    density = int((height * density)/width)
    while True:
        insertline = np.empty([density,np.shape(data2d)[1]], dtype = float)
        j = 0   # 从第1列开始
        while j < np.shape(data2d)[1] :  # 当列数在总列数范围内
            insertline[:,j] = np.linspace(data2d[i,j],data2d[i+1,j],density+1,endpoint = False)[1:density+1]  # 将第i行和第i加一行的中间值赋给insertline的第j列
            j = j + 1 
            
        data2d = np.insert(data2d, i+1,insertline, axis=0) # 插入多行
        i = i + 1 + density 
        muqianhangshu = np.shape(data2d)[0]  # 目前行数
        if muqianhangshu == (benzhenghangshu-1)*density + benzhenghangshu:
            break
    
    #%% 创建画布
    fig, ax = plt.subplots(figsize = (10,10))#facecolor='#F5F5EB',
      
    # 创建一个画布，把这个画布赋值给变量fig
    
    # 同时在这个画布上创建了一个axes，把这个axes赋值给ax
    
    # 所有未来的fig.xxx都是对这个画布的操作，所有ax.xxx都是对这个axes的操作
    im = ax.imshow(data2d,origin='lower',cmap = 'jet')   #          
    
    #%% 坐标轴 标题 图例
    plt.xlabel('Size (cm)')
    plt.ylabel('Size (cm)')
    
    old_ticksx = np.linspace(0,np.shape(data2d)[1],10)
    old_ticksy = np.linspace(0,np.shape(data2d)[0],10)

    new_ticksx = np.linspace(0,width,10)  #  对新的轴设定范围
    new_ticksy = np.linspace(0,height,10)
    new_ticksx = np.round(new_ticksx,1)  #   对新的轴坐标取小数点后一位
    new_ticksy = np.round(new_ticksy,1)
    ax.xaxis.set_ticks(old_ticksx,new_ticksx)
    ax.yaxis.set_ticks(old_ticksy,new_ticksy) 
    
    ax.set_title('S21 of %s KDP'%(title))
    
    fig.colorbar(im, ax=ax, label='S21',fraction=0.046, pad=0.04)  
    # plt.savefig(‘heatmap.svg’) # 保存图片 
    plt.show()
    return (data2d)
data1 = np.array([
#0.    8.     16.    23.     31.    39.    47.    55.    63.    70.    78.    86.    94.    102.  110.   117.   125.    133.

[0,    0,     0,     0,      0,     -1,    -1,    0,     0,      0,     0,     0,     0,     0,    -1,    -1,    -1,     0],
#0.    8.     17.    25.     33.    42.    50.    58.    67.    75.    84.    92.    100.   109.  117.   125.   134.    142
[0,    0,     0,     0,      -1,    -2,    -2,   -2,     0,      0,     0,     0,     0,    -0.5,  -2,    -1,    -1,     0],
#0.    8.     17.    25.     33.    42.    50.    58.    67.    75.    84.    92.    100.   109.  117.   125.   134.    142
[0,    0,     0,     0,      -2,     -3,    -3,   -2,     0,      0,     0,     0,     0,     1,    3,     0,     0,     0],
#0.    8.     17.    25.     33.    41.    50.    58.    66.    75.    83.    91.    100.   108.  116.   124.   133.    141
[0,   -1,     -3,  -3.5,     -5,     -5,   -4,    -3,    -1,      0,     0,     3,     5,     4,    3,     0,     0,     0],
#0.    8.     16.    24.     32.    40.    48.    56.    64.    71.    79.    87.     95.   103.  111.   119.   127.    135  
[-2,   -3,    -3,    -4,    -6,     -4,    -3,    -3,   -3.5,    3,     3,    3.5,    4,     3.5,  3.3,   1,      0,     0],
# 19
#0.    8.     16.    25.     33.    41.    49.    57.    65.    74.    82.    90.     98.   106.  114.   123.   131.    139
[-2,  -2.5,  -3.2,   -4,     -5,   -4,     -4,    -4,   -3.5,  3.5,     3,    3.7,    4.1,   3,    1,     1,     0,      0 ],
# 21
#0.    8.     16.    25.     33.    41.    49.    57.    65.    74.    82.    90.     98.   106.  114.   123.   131.    139
[-2,   -3,    -5,    -5,     -5,   -3.5,  -4,   -4.5,    0,     0,      2,    3.5,     4,    3.5,  4,     4,     3,      3],
#0.    8.     17.    25.     34.    42.    51.    59.    68.    76.    85.    93.    102.   110.  119.   127.   136.    144
[-3,   -3,    -3.5,  -5,     -4,    -3,    -3,    -3,   -1,    -2.5,   -1,   3.5,     4,     4,    4,   4.5,     4,      4],
#0.    8.     16.    24.     32.    40.    48.    56.    64.    71.    79.    87.     95.   103.  111.   119.   127.    135
[-2,   -2,    -4,    -4,     -5,   -3.5,   -4,    -1,    -1,    -4,     0,     4,     5,     4,    3,    3,      3,      3 ],

# 27
#0.    8.     16.    24.     32.    40.    48.    56.    64.    71.    79.    87.     95.   103.  111.   119.   127.    135
[-0.5,-0.5,   -0.5,  -0.5, -0.5,  -0.5,    0,     0,      0,     0,     0,    0,      -1,   -0.5,   0,    0,    0.5,     1],
#0.    8.     16.    25.     33.    41.    49.    57.    65.    74.    82.    90.     98.   106.  114.   123.   131.    139
[0,    0,      0,    0,       1,    0,      0,     0,     0,     0,     0,    -2,   -3.5,    -4,   -3,    -2,    -2,     -1],
# 31
#0.    8.     16.    24.     32.    40.    48.    56.    64.    73.    81.    89.     97.   105.  113.   121.   129.    137
[2.8,  2.8,  2.8,    3,     3.5,     3,     3,     1,     0,     0,    -2,    -2,    -4.5,   -5,   -4,    -3,    -4,     -6],
# 33
#0.    9.     18.    28.     37.    46.    55.    65.    74.    83.    92.   102.     111.  120.  129.   139.   148.    157
[2,      2,    2,      3,    3.5,     4,    2.5,    2,     0,   -0.5,   -2,    -3,    -5,    -6,    -5,   -5,    -5,     -5],
# 35
#0.    8.     17.    25.     33.    41.    50.    58.    66.    75.    83.    91.     100.  108.  116.   124.   133.    141
[2,    2,      2,     3,      3,     5,     2,     0,     0,    -0.5,   -0.5,  -3,     -4,   -4,   -3,    -3,    0,      0],
# 37
#0.    8.     16.    25.     33.    41.    49.    57.    65.    74.    82.    90.     98.   106.  114.   123.   131.    139
[2,    2,     2.5,    3,    4.8,     4,     3,     4,     0,    -1,    -2,    -3.5,    -3,   -3,   -3.5,  -3.5,   -3.5, -3  ],
# 39
#0.    8.     16.    24.     32.    40.    48.    56.    64.    73.    81.    89.     97.   105.  113.   121.   129.    137
[2,    2,     3,      3,     4.5,    4,     3.2,  3.5,   1,     -1,   -2.5,   -3.5,   -3.5,  -3,   -4,   -3.8,   -4,     -4],

#26.   33.    41.    48.     55.    62.    70.    77.    84.    92.    99.    106.    114.  121   128.   135.   143.    150
[0,    0,      0,     2,      3,    3.5,    2,    2,      0,    -0.5,  -2,     -2,     -4,   -3,   -3,   -2.5,   -3,     -2],
#0.    9.     17.    26.     34.    43.    51.    60.    68.    77.    85.    94.     102.  111.  119.   128.   136.    145
[0,    0,      0,    0,      0.5,    1,     1,    1.5,    0,     0,    -0.4,   -1,     -3,   -2,   0,     0,     0,       0]
])
data1 =  0.1414 * data1
data2d = er(data1,4.0,3.5,'σ = 0.04')

data4 = np.array([
# cy   cy     注意 右旋为正  还是左旋为负
[0,    0,    0,    0,    -1,   -3,  -4,  -5,     -4,   -3,   0,    3,   4,   5,   3,   1,    -1,   -2,   -2,    0,    0],
[0,    0,    0,    0,    -1,  -3.5, -5,  -5,    -4.5,  -3,   0,  3.5,   5, 5.5, 3.5,   2,   -0.5, -3,    0,    0,    0],
[-0.5,-0.5,  0,  -0.5,   -3,   -4,  -5,  -5,     -5,   -2, 0.5,    4,   6,   6,   5,   3,   -1,   -3,   -2,    0,    0],
[-0.5, -1,   0,    0,    -3,   -4,  -5,  -5,     -5,   -4,   0,  4.5,   7,   7,  5.5,  3,   0,   -5.5,  -2,   -1,    0], 
[0,    0,    0,    0,    -2,   -4,-5.5,  -6,     -5,   -1,   2,    6,  7.5,  8,   4,   0,     -6,   -2,   -1,    0,     0],
[0,    0,    0,    0,    -1,    0,  -4,  -5.5,   -4,    1,   5,   5.5, 6.5,  3,  -6,  -2,     0,     0,    0,    0,     0],
#15
[0,    0,    0,    0,     0,    0,  -1,  -6,     -5,    0,   4,   3.5, 4.5,  2,  -2,  -2,     0.5,   1,    0,    0,     0],
[0,    0,    0,    0,     0,  -0.5, -3,  -6.5,   -8,   -4,   0,   0.5,   3,7.5,   3,  2.5,    0.5,   1,    0,    0,     0],
# 19                                                                      cuoguo
[0,    0,    0,    0,     0,    0,  -4,  -8,     -8.5, -5,  -1,    0,    6,  7,   4,    5,    2,     2,    1,    0,     0], 
[0,    0,    0,    0,     1,    2,   3,  -6,      -9,-6.5,  -5,   0.5,   4,  2,   0,    2,    3,   4.5,    2,    1,   0.5],
[0,    0,    0,    0,     2,    4,   4,   0,     -2,   -1,  -3,    0,-3.5,-7.5,-5.5, -1.5,    4,     4,    2,    0.5,   0],
[0,    0,    0,    0,     0,  2.5,  4.5,  6,      5,    2,  -4,   -5, -6.5, -9,  -5,    0,    1,     2,    1,    0,     0],

[0,    0,    0,    0,   1.5,  2.5,   6, 6.5,      9,    2,  -5, -6.5, -7.5,-7.5, -4,   -2,    0,     0,    0, -0.5,  -0.5], 
# 29
[0,    0,    0,  0.5,    1,    2,    3, 7.5,      9,    4, -0.5,  -5,  -8,  -8,  -2,   -1,    -2,    0,    0,   -1,    -1],
[0,    0,    0,  0.3,   0.5, 1.5,    0,  7,       8,  3.5,   0, -6.5,-7.5,  -5,  -4, -2.5,   -1,   -1,   -1,   -1,    -1],
# 33
[0,    0,    0,    0,   0.5, 2.5,    0,  6.5,     8,    5,   0,   -5,  -6,  -5,  -2, -2.4,   -2,  -0.5,-0.5, -0.5,  -0.5],
# 35
[0,  -0.5, -0.5, -0.5,    0, -4.5,  0.5,  4,     4.5,    1,   0,    1,-0.5,  -1,   0,   0,   0,   -0.3,-0.4, -0.4,  -0.4],
[0,  -0.5, -0.5, -1.5,   -2,  -4,    0, 2.5,     4.5,   4,  0.5,   0, -0.5,-0.5,  -1,  -1,   0,     0,    0,    0,    0],

[0,  -0.4, -0.4,  -1,  -0.2,   0,    3,   5,      5,    2,    0,  -2,  -4, -4.5,  -3,-2.5,   -0.5,   0,    0,    0,   0],
# 41
#0.    8.    16.   23.   31.   39.  47.  55.     2.    10.  18.   26.  34.  41.  49.   57. 5.    13.    20.   28.   36
[0,  -0.3, -0.3, -0.4,   0,    0,  1.5, 4.5,     5,   2.5,    0,  -1,-3.5,  -4, -3.5,  -2,   -0.3,   0,    0,    0,   0],
[0,    0,    0,    0,     0,   0,  0.2,   3,     4,     2,    0,-0.9,  -2,-2.5,   -2,  -1,
-0.2,   0,    0,    0,   0 ] ])


fig, axs = plt.subplots(2, 2)   # 等价于 plt.subplots(2,2) 创建画布fig 和四个子区域
cmaps = 'jet'   # 选择热图的映射色系 这里为不同列设置不同的色系 'viridis'
for col in range(2):  # 每一列的子图
    for row in range(2):  # 每一行的子图
        ax = axs[row, col]  #  
        p = ax.pcolormesh(data4,
                            cmap=cmaps)
# np.random.random((20, 20))  生成 20 * 20 的浮点数从 0-1 中随机取值
# matplotlib库的pyplot模块中的pcolormesh()函数用于创建具有非规则矩形网格的伪彩色图
        fig.colorbar(p, ax=ax)
'''
#%% 导入                              
import matplotlib.pyplot as plt
import numpy as np

#0.    8.5   17.1  25.6  34.1  42.6  51.2  59.7     8.2  16.8  25.3  33.8  42.4  50.9  59.4    7.9  16.5  25

[0.1,  0.3,  0.7,  0.8,  0.3, -0.2, -0.4, -0.7,    -0.9, -0.3,  0.2,  0.3,  0.4,  0.3,  0.1,   0.0,  0.1, 0.0 ],
[0.3,  0.5,  0.8,  0.6,  0.2, -0.3, -0.7, -0.8,    -0.8, -0.1,  0.0,  0.2,  0.3,  0.2,  0.0,  -0.2, -0.1,  0.0 ],
[0.4,  0.6,  0.9,  1.0,  0.3, -0.2, -0.5, -0.7,    -0.6, -0.3, -0.1,  0.0,  0.2,  0.1, -0.1,  -0.4, -0.3, -0.1],
[0.3,  0.5,  0.6,  0.9,  0.8,  0.0, -0.4, -0.6,    -0.3, -0.4, -0.2, -0.1,  0.1,  0.0, -0.2,  -0.5, -0.4, -0.2], 
[0.0,  0.1,  0.2,  0.4,  0.6,  0.1, -0.1, -0.3,     0  , -0.5, -0.3,  0.0,  0.05, 0.0, -0.1,  -0.45, -0.41, -0.3],
[0.0,  0.0, -0.1,  0.1,  0.3, 0.05,  0.3,  0.4,     0.2, -0.3,  0.0,  0.3,  0.4,  0.3,  0.0,  -0.6,  -0.7,  -0.4],

[-0.3,-0.4, -0.5,-0.55,  0.0,  0.3,  0.2,  0.4,     0.3,  0.4,  0.3,  0.8,  1.0,  0.6, -0.4,  -0.7,  -0.7,  0.6],
[-0.4,-0.5, -0.6, -0.5,  0.01, 0.4, 0.35,  0.3,     0.1,  0.2,  0.4,  0.6,  0.3, -0.1, -0.2,  -0.15, -0.1,  0.0],
[-0.3,-0.4, -0.5, -0.8,  -0.5, 0.1,  0.5,  0.7,     0.5, -0.4, -0.8,  -1,  -0.3,  0.3,  0.5,   0.8,   0.7,  0.5] , 
[-0.2,-0.3, -0.4, -0.5,  -0.1, 0.2, 0.45,  0.5,     0.3, -0.2,  0.0, -0.5, -0.4, -0.2,  0.2,   0.5,   0.4, 0.45 ],
[-0.1,-0.2,-0.09, -0.1, -0.11,0.02, 0.25,  0.3,     0.5, -0.35,-0.05, 0.0, -0.3, -0.4, -0.2,   0.1,   0.3,  0.2],
[0.0, -0.1, -0.2, -0.2,  -0.1,-0.01, 0.0,  0.1,     0.0,  0.6,  0.4,  0.1, -0.1, -0.3, -0.1,   0.0,   0.2,  0.1],
                                     #cunyi                                                           #cunyi    
                                                                                                      #cunyi
[0.05,-0.11,-0.3, -0.4, -0.5, -0.6, -0.4,  0.0,     0.1, 0.68,  0.6,  0.3,  0.1,  0.0, -0.2,   0.0,   0.1,  0.0 ], 
[-0.01,-0.2,-0.4, -0.5,  0.4, -0.3,-0.05, -0.1,     0.2,  0.6,  0.3,  0.1, 0.05,  0.3, 0.05,   0.02,  0.08, 0.08],
[0.0, -0.05,-0.2,-0.35, -0.4, -0.2,  0.0,  0.0,     0.0, -0.2,  0.0,  0.0, 0.00,  0.3,  0.7,   0.4,   0.2,   0.0],
[0.0,  0.0, -0.3, -0.4,  0.2, -0.05, 0.0,  0.3,     0.45,-0.3, -0.6, -0.5, -0.5, -0.2,  0.3,   0.8,   0.5,   0.2 ],
[-0.03,-0.02,-0.01,-0.0, 0.0, 0.05,  0.3,  0.5,     0.6,  0.0, -0.5, -0.45,-0.48,-0.4, -0.1,   0.3,   0.6,   0.3],
[0.0,  0.0, -0.05, 0.0,  0.0, 0.25, -0.45, 0.53,    0.55,-0.1, -0.35,-0.5, -0.45,-0.35,-0.15,  0.1,   0.15,  0.2]  ])
fig, ax = plt.subplots(2,3)
ax[0,0].imshow()
ax[0,1].imshow(data5)
ax[0,2].imshow(data5)
ax[1,0].imshow(data5)
ax[1,1].imshow(data5)
ax[1,2].imshow(data5)
fig.colorbar(A5,ax=ax[1,1])
